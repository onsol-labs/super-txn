/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  SuperTransactionCreateArgs,
  superTransactionCreateArgsBeet,
} from '../types/SuperTransactionCreateArgs'

/**
 * @category Instructions
 * @category SuperTransactionCreateFromBuffer
 * @category generated
 */
export type SuperTransactionCreateFromBufferInstructionArgs = {
  args: SuperTransactionCreateArgs
}
/**
 * @category Instructions
 * @category SuperTransactionCreateFromBuffer
 * @category generated
 */
export const superTransactionCreateFromBufferStruct =
  new beet.FixableBeetArgsStruct<
    SuperTransactionCreateFromBufferInstructionArgs & {
      instructionDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['args', superTransactionCreateArgsBeet],
    ],
    'SuperTransactionCreateFromBufferInstructionArgs'
  )
/**
 * Accounts required by the _superTransactionCreateFromBuffer_ instruction
 *
 * @property [_writable_] superTransactionCreateItemTransaction
 * @property [**signer**] superTransactionCreateItemCreator
 * @property [_writable_, **signer**] superTransactionCreateItemRentPayer
 * @property [] superTransactionCreateItemSystemProgram
 * @property [_writable_] transactionBuffer
 * @property [_writable_, **signer**] creator
 * @category Instructions
 * @category SuperTransactionCreateFromBuffer
 * @category generated
 */
export type SuperTransactionCreateFromBufferInstructionAccounts = {
  superTransactionCreateItemTransaction: web3.PublicKey
  superTransactionCreateItemCreator: web3.PublicKey
  superTransactionCreateItemRentPayer: web3.PublicKey
  superTransactionCreateItemSystemProgram: web3.PublicKey
  transactionBuffer: web3.PublicKey
  creator: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const superTransactionCreateFromBufferInstructionDiscriminator = [
  77, 220, 1, 137, 223, 42, 104, 222,
]

/**
 * Creates a _SuperTransactionCreateFromBuffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SuperTransactionCreateFromBuffer
 * @category generated
 */
export function createSuperTransactionCreateFromBufferInstruction(
  accounts: SuperTransactionCreateFromBufferInstructionAccounts,
  args: SuperTransactionCreateFromBufferInstructionArgs,
  programId = new web3.PublicKey('superB6bzm82y1To5rRaMr7KmqkLNVnCUGwUBemtJV3')
) {
  const [data] = superTransactionCreateFromBufferStruct.serialize({
    instructionDiscriminator:
      superTransactionCreateFromBufferInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.superTransactionCreateItemTransaction,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.superTransactionCreateItemCreator,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.superTransactionCreateItemRentPayer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.superTransactionCreateItemSystemProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionBuffer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
